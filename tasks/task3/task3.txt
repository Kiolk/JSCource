1. Проверка времени на корректность
В этом задании необходимо проверить, что числа составляют корректное время.
Необходимо реализовать функцию, первым аргументом в которую передается
количество часов в 24-часовом формате, вторым – количество минут. Функция
должна вернуть логическое значение true или false, что будет означать
корректность времени.
Например:
isTimeValid(14, 43); должнавернуть true
isTimeValid(32, 43); должна вернуть false
===============================================================================
2. Добавление минут ко времени.
В этом задании необходимо реализовать функцию, которая увеличивает время
на заданное количество минут.Первым аргументом в функцию передается
количество часов в 24-часовом формате, вторым – количество минут, третьим –
произвольное количество минут, которое необходимо добавить к указанному
времени.
Например:
addMinutes(12, 25, 30); должна вернуть строку со значением 12:55
addMinutes(23, 40, 83); должна вернуть строку со значением 01:03
===============================================================================
3. Определение поры года
Необходимо реализовать функцию, которая вернет название поры года в виде строки. Функция принимает один аргумент – номер месяца.
Например:
getSeason(1); должна вернуть строку со значением Зима
getSeason(7); должна вернуть строку со значением Лето
===============================================================================
4. Склонения слова «День»
Необходимо реализовать функцию, которая вернет верное склонение слова «День» виде строки. Функция принимает один аргумент – количество дней.
Например:
getDayDeclension(2); должна вернуть строку со значением Дня
getDayDeclension(1); должна вернуть строку со значением День
getDayDeclension(7); должна вернуть строку со значением Дней
===============================================================================
5. В поисках суммы.
Необходимо реализовать функцию, которая вернет числовое значение суммы в зависимости от введенного аргумента. Функция принимает один аргумент – положительное целое число.
Например:
getSumm(6); должна вывести 21
Алгоритм расчета суммы: getSumm(6) –> 1+2+3+4+5+6
===============================================================================
6. Таблица умножения.
Необходимо реализовать функцию, которая выведет в консоль таблицу умножения до 10. Функция принимает один аргумент – число, и должна вывести в консоль таблицу умножения для этого числа.
Например:
getMultiplicationTable(178); функция должна вывести в консоль:
178 * 1 = 178
178 * 2 = 356
178 * 3 = 534
178 * 4 = 712
178 * 5 = 890
178 * 6 = 1068
178 * 7 = 1246
178 * 8 = 1424
178 * 9 = 1602
178 * 10 = 1780
===============================================================================
7. Попадание в цель.
Необходимо реализовать две функции, которые определяют, попадает ли точка
внутрь графика (одна функция для окружности, вторая – для
четырехугольника). Функции возвращают логическое значение (true или false).
Функции принимают два аргумента: первый – х-координата точки, второй – у-
координата точки.
Например:
isPointInCircle(3, 5); должна вернуть логическое значение true
isPointInCircle(0, 0); должна вернуть логическое значение false
Если точка на границе окружности – считаем что она попадает в окружность.
Например: isPointInCircle(3, 1); должна вернуть логическое значение true.
То же необходимо сделать и для четырехугольника.